*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="dpiaware.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS dpiresizer AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getcontrolinformation
		*m: gethierarchy
		*m: getratio
		*m: logcontrolinformation
		*m: processcheckbox
		*m: processcolumn
		*m: processcombobox
		*m: processcommandbutton
		*m: processcommandgroup
		*m: processcontainer
		*m: processcurrentcontrol
		*m: processeditbox
		*m: processform
		*m: processgrid
		*m: processimage
		*m: processlabel
		*m: processlistbox
		*m: processolecontrol
		*m: processoptionbutton
		*m: processoptiongroup
		*m: processpage
		*m: processpageframe
		*m: processspinner
		*m: processtextbox
		*m: reapplyanchorproperty
		*m: reapplysavedproperties
		*m: resizecontainer
		*m: setnewcolumnwidths
		*m: setnewfontsize
		*m: setnewposition
		*m: setnewsize
		*p: dpiratio
		*p: logfilename
	*</DefinedPropArrayMethod>

	dpiratio = 0
	logfilename = .F.
	Name = "dpiresizer"
	
	PROCEDURE getcontrolinformation
		LPARAMETERS currentControl as PageFrame 
		LOCAL output, dpiRatio
		dpiRatio = this.GetRatio()
		output = this.GetHierarchy(currentControl) + CHR(13)
		output = output + CHR(9) + "dpiRatio: " + TRANSFORM(dpiRatio) + CHR(13)
		output = output + CHR(9) +"Class: " + currentControl.Class + CHR(13)
		IF PEMSTATUS(currentControl, "OriginalLeft", 5)
			output = output + CHR(9) + "Original Left: "  + TRANSFORM(currentControl.OriginalLeft) + CHR(13)
			output = output + CHR(9) + "Original Top: " + TRANSFORM(currentControl.OriginalTop) + CHR(13)
			output = output + CHR(9) + "Original Width: " + TRANSFORM(currentControl.OriginalWidth) + CHR(13)
			output = output + CHR(9) + "Original Height: " + TRANSFORM(currentControl.OriginalHeight) + CHR(13)
			output = output + CHR(9) + "Expected Left: " + TRANSFORM(currentControl.OriginalLeft * dpiRatio) + CHR(13)
			output = output + CHR(9) + "Expected Top: " + TRANSFORM(currentControl.OriginalTop * dpiRatio) + CHR(13)
			output = output + CHR(9) + "Expected Width: " + TRANSFORM(currentControl.OriginalWidth * dpiRatio) + CHR(13)
			output = output + CHR(9) + "Expected Height: " + TRANSFORM(currentControl.OriginalHeight * dpiRatio) + CHR(13)
		ENDIF 
		IF PEMSTATUS(currentControl, "Left", 5)
			output = output + CHR(9) + "Actual Left: "  + TRANSFORM(currentControl.Left) + CHR(13)
			output = output + CHR(9) + "Actual Top: " + TRANSFORM(currentControl.Top) + CHR(13)
			output = output + CHR(9) + "Actual Width: " + TRANSFORM(currentControl.Width) + CHR(13)
			output = output + CHR(9) + "Actual Height: " + TRANSFORM(currentControl.Height) + CHR(13)
		ENDIF 
		IF PEMSTATUS(currentControl, "OriginalPageHeight", 5)
			output = output + CHR(9) + "Original PageHeight: " + TRANSFORM(currentControl.OriginalPageHeight) + CHR(13)
			output = output + CHR(9) + "Original PageWidth: " + TRANSFORM(currentControl.OriginalPageWidth) + CHR(13)
			output = output + CHR(9) + "Expected PageHeight: " + TRANSFORM(currentControl.OriginalPageHeight * dpiRatio) + CHR(13)
			output = output + CHR(9) + "Expected PageWidth: " + TRANSFORM(currentControl.OriginalPageWidth * dpiRatio) + CHR(13)
			output = output + CHR(9) + "Actual PageHeight: " + TRANSFORM(currentControl.PageHeight) + CHR(13)
			output = output + CHR(9) + "Actual PageWidth: " + TRANSFORM(currentControl.PageWidth) + CHR(13)
		ENDIF 
		RETURN output
		
	ENDPROC

	PROCEDURE gethierarchy
		LPARAMETERS currentControl
		*-- For debugging, returns the name of the currentControls parents  i.e. form.container.object
		LOCAL hierarchy
		hierarchy = currentControl.Name
		DO WHILE TYPE("currentControl.Parent") == "O"
			currentControl = currentControl.Parent
			hierarchy = currentControl.Name + "." + hierarchy
		ENDDO 
		RETURN hierarchy
	ENDPROC

	PROCEDURE getratio
		this.dpiratio = _screen.dpiFactor
		RETURN MAX(this.dpiratio, 1)
		
	ENDPROC

	PROCEDURE logcontrolinformation
		LPARAMETERS logMessage, currentControl
		IF PCOUNT() == 0
			IF NOT EMPTY(this.LogFileName)
				TRY 
					ERASE (this.LogFileName)
				CATCH 
				ENDTRY 
			ENDIF
			RETURN  
		ENDIF
		IF PCOUNT() < 2
			RETURN 
		ENDIF 
		IF EMPTY(this.LogFileName)
			RETURN 
		ENDIF  
		IF TYPE("currentControl.BaseClass") <> "C"
			RETURN 
		ENDIF 
		logMessage = logMessage + CHR(13) + this.GetControlInformation(currentControl)
		STRTOFILE(logMessage, this.LogFileName, 1)
		
	ENDPROC

	PROCEDURE processcheckbox
		LPARAMETERS currentControl as checkbox
		IF LOWER(currentControl.BaseClass) == "checkbox"
			this.SetNewFontSize(currentControl)
			IF NOT currentControl.AutoSize
				this.SetNewSize(currentControl)
			ENDIF 
			this.SetNewPosition(currentControl)
		ENDIF 
	ENDPROC

	PROCEDURE processcolumn
		LPARAMETERS currentControl as Column
		IF LOWER(currentControl.BaseClass) = "column"
			currentControl.Width = currentControl.OriginalWidth * this.GetRatio()
		ENDIF
	ENDPROC

	PROCEDURE processcombobox
		LPARAMETERS currentControl as ComboBox
		IF LOWER(currentControl.BaseClass) = "combobox"
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
			This.SetNewFontSize(currentControl)
		ENDIF 
		
	ENDPROC

	PROCEDURE processcommandbutton
		LPARAMETERS currentControl as CommandButton
		IF LOWER(currentControl.BaseClass) = "commandbutton"
			IF NOT currentControl.AutoSize
				this.SetNewSize(currentControl)
			ENDIF 
			this.SetNewPosition(currentControl)
			This.SetNewFontSize(currentControl)
		ENDIF 
		
	ENDPROC

	PROCEDURE processcommandgroup
		LPARAMETERS currentControl as commandgroup 
		IF LOWER(currentControl.BaseClass) == "commandgroup"
			LOCAL controlLoop
			FOR controlLoop = 1 TO currentControl.ButtonCount
				this.ProcessCurrentControl(currentControl.Buttons(controlLoop))
			NEXT 
			this.setnewposition(currentControl)
			IF NOT currentControl.AutoSize
				this.setnewsize(currentControl)
			ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE processcontainer
		LPARAMETERS currentControl as container 
		IF LOWER(currentControl.BaseClass) == "container"
			LOCAL controlLoop
			FOR controlLoop = 1 TO currentControl.ControlCount
				this.ProcessCurrentControl(currentControl.Controls(controlLoop))
			NEXT 
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
		ENDIF 
	ENDPROC

	PROCEDURE processcurrentcontrol
		LPARAMETERS currentControl
		IF TYPE("currentControl.BaseClass") != "C"
			RETURN 
		ENDIF 
		IF TYPE("currentControl.Top") == "N" AND TYPE("currentControl.OriginalTop") <> "N"
			currentControl.AddProperty("OriginalTop", currentControl.Top)
			currentControl.AddProperty("OriginalLeft", currentControl.Left)
		ENDIF
		IF TYPE("currentControl.Height") == "N" AND TYPE("currentControl.OriginalHeight") <> "N"
			currentControl.AddProperty("OriginalHeight", currentControl.Height)
		ENDIF 
		IF TYPE("currentControl.Width") == "N" AND TYPE("currentControl.OriginalWidth") <> "N"
			currentControl.AddProperty("OriginalWidth", currentControl.Width)
		ENDIF 
		IF TYPE("currentControl.FontSize") == "N" AND TYPE("currentControl.OriginalFontSize") <> "N"
			currentControl.AddProperty("OriginalFontSize", currentControl.FontSize)
		ENDIF 
		IF TYPE("currentControl.Anchor") == "N" AND currentControl.Anchor > 0 
			IF TYPE("currentControl.OriginalAnchor") <> "N"
				currentControl.AddProperty("OriginalAnchor", currentControl.Anchor)
			ENDIF 
			currentControl.Anchor = 0
		ENDIF 
		This.ProcessCheckbox(currentControl)
		This.ProcessColumn(currentControl)
		This.ProcessCombobox(currentControl)
		This.ProcessCommandButton(currentControl)
		This.ProcessCommandGroup(currentControl)
		This.ProcessContainer(currentControl)
		This.ProcessEditbox(currentControl)
		This.ProcessForm(currentControl)
		This.ProcessGrid(currentControl)
		This.ProcessImage(currentControl)
		This.ProcessLabel(currentControl)
		This.ProcessListbox(currentControl)
		This.ProcessOleControl(currentControl)
		This.ProcessOptionButton(currentControl)
		This.ProcessOptionGroup(currentControl)
		This.ProcessPage(currentControl)
		This.ProcessPageFrame(currentControl)
		This.ProcessSpinner(currentControl)
		This.ProcessTextbox(currentControl)
		
	ENDPROC

	PROCEDURE processeditbox
		LPARAMETERS currentControl as editbox 
		IF LOWER(currentControl.BaseClass) = "editbox"
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
			this.SetNewFontSize(currentControl)
		ENDIF 
	ENDPROC

	PROCEDURE processform
		LPARAMETERS currentControl as form 
		IF LOWER(currentControl.BaseClass) == "form"
			LOCAL controlLoop, dpiRatio
			dpiRatio = This.GetRatio()
			IF TYPE("currentControl.OriginalMaxWidth") <> "N"
				currentControl.AddProperty("OriginalMinWidth", currentControl.MinWidth)
				currentControl.AddProperty("OriginalMaxWidth", currentControl.MaxWidth)
				currentControl.AddProperty("OriginalMinHeight", currentControl.MinHeight)
				currentControl.AddProperty("OriginalMaxHeight", currentControl.MaxHeight)
			ENDIF 
			FOR controlLoop = 1 TO currentControl.ControlCount
				this.ProcessCurrentControl(currentControl.Controls(controlLoop))
			NEXT 
			this.setNewFontSize(currentControl)
			STORE -1 TO currentControl.MinWidth, currentControl.MaxWidth
			STORE -1 TO currentControl.MinHeight, currentControl.MaxHeight
			IF currentControl.OriginalMinHeight > 0
				currentControl.MinHeight = currentControl.OriginalMinHeight * dpiRatio
			ENDIF 
			IF currentControl.OriginalMinWidth > 0
				currentControl.MinWidth = currentControl.OriginalMinWidth * dpiRatio
			ENDIF 
			IF currentControl.OriginalMaxHeight > 0
				currentControl.MaxHeight = currentControl.OriginalMaxHeight * dpiRatio
			ENDIF 
			IF currentControl.OriginalMaxWidth > 0
				currentControl.MaxWidth = currentControl.OriginalMaxWidth * dpiRatio
			ENDIF 
				
			this.SetNewSize(currentControl)
		ENDIF 
		
	ENDPROC

	PROCEDURE processgrid
		LPARAMETERS currentControl as Grid
		IF LOWER(currentControl.BaseClass) = "grid"
			IF TYPE("currentControl.OriginalHeaderHeight") <> "N"
				currentControl.AddProperty("OriginalHeaderHeight", currentControl.HeaderHeight)
				currentControl.AddProperty("OriginalRowHeight", currentControl.RowHeight)
			ENDIF 
			dpiRatio = this.GetRatio()
		
			LOCAL controlLoop
			FOR controlLoop = 1 TO currentControl.ColumnCount
				this.ProcessCurrentControl(currentControl.Columns(controlLoop))
			NEXT 
			IF LOWER(PEMSTATUS(currentControl, "SetColumnWidths",3)) = "method"
				currentControl.SetColumnWidths()
			ENDIF 
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
			this.SetNewFontSize(currentControl)
			currentControl.HeaderHeight = currentControl.OriginalHeaderHeight * dpiRatio
			currentControl.RowHeight = currentControl.OriginalRowHeight * dpiRatio
			IF LOWER(PEMSTATUS(currentControl, "SetColumnWidths",3)) == "method"
				currentControl.SetColumnWidths()
			ENDIF 
		ENDIF 
		
	ENDPROC

	PROCEDURE processimage
		LPARAMETERS currentControl as Image 
		IF LOWER(currentControl.BaseClass) = "image"
			IF currentControl.Stretch > 0
				this.SetNewSize(currentControl)
			ENDIF 
			this.SetNewPosition(currentControl)
			if pemstatus(currentControl, "ChangePicture", 5)
				currentControl.ChangePicture()
			endif 
		ENDIF 
	ENDPROC

	PROCEDURE processlabel
		LPARAMETERS currentControl as label 
		IF LOWER(currentControl.BaseClass) = "label"
			IF currentControl.AutoSize AND TYPE("currentControl.FirstResize") <> "L"
				currentControl.AddProperty("FirstResize", .F.)
				this.textForm.FontName = currentControl.FontName
				this.textForm.FontSize = currentControl.FontSize
				currentControl.Width = this.textForm.TextWidth(currentControl.Caption + "N")
				currentControl.OriginalWidth = currentControl.Width
			ENDIF 
			LOCAL rightPosition, dpiRatio, newWidth
			rightPosition = currentControl.OriginalLeft + currentControl.OriginalWidth
			dpiRatio = this.GetRatio()
			this.SetNewFontSize(currentControl)
			IF NOT currentControl.AutoSize
				this.SetNewSize(currentControl)
				newWidth = currentControl.Width
			ELSE
				this.textForm.FontName = currentControl.FontName
				this.textForm.FontSize = currentControl.FontSize
				newWidth = this.textForm.TextWidth(currentControl.Caption + "N")
				currentControl.Width = newWidth
			ENDIF 
			currentControl.Top = currentControl.OriginalTop * dpiRatio
			currentControl.Left = (rightPosition * dpiRatio) - newWidth
		ENDIF 
		
	ENDPROC

	PROCEDURE processlistbox
		LPARAMETERS currentControl as Listbox 
		IF LOWER(currentControl.BaseClass) = "listbox"
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
			this.SetNewFontSize(currentControl)
			this.SetNewColumnWidths(currentControl)
		ENDIF 
	ENDPROC

	PROCEDURE processolecontrol
		LPARAMETERS currentControl as OleControl
		IF LOWER(currentControl.BaseClass) = "olecontrol"
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
		ENDIF 
		
	ENDPROC

	PROCEDURE processoptionbutton
		LPARAMETERS currentControl as optionbutton 
		IF LOWER(currentControl.BaseClass) == "optionbutton"
			this.SetNewFontSize(currentControl)
			IF NOT currentControl.AutoSize
				this.SetNewSize(currentControl)
			ELSE 
				currentControl.AutoSize = .T.
			ENDIF 
			this.SetNewPosition(currentControl)
			this.LogControlInformation("After processing", currentControl)
		ENDIF 
		
	ENDPROC

	PROCEDURE processoptiongroup
		LPARAMETERS currentControl as optiongroup 
		IF LOWER(currentControl.BaseClass) == "optiongroup"
			LOCAL controlLoop, autoSize
			autoSize = currentControl.AutoSize
			currentControl.AutoSize = .F.
			FOR controlLoop = 1 TO currentControl.ButtonCount
				this.ProcessCurrentControl(currentControl.Buttons(controlLoop))
			NEXT
			this.SetNewPosition(currentControl) 
			IF NOT autoSize
				this.SetNewSize(currentControl)
			else
				currentControl.AutoSize = .T.
			ENDIF 
		ENDIF 
	ENDPROC

	PROCEDURE processpage
		LPARAMETERS currentControl as Page 
		IF LOWER(currentControl.BaseClass) == "page"
			LOCAL controlLoop
			FOR controlLoop = 1 TO currentControl.ControlCount
				this.ProcessCurrentControl(currentControl.Controls(controlLoop))
			NEXT 
			this.setNewFontSize(currentControl)
		ENDIF 
	ENDPROC

	PROCEDURE processpageframe
		LPARAMETERS currentControl as Pageframe 
		IF LOWER(currentControl.BaseClass) = "pageframe"
			IF TYPE("currentControl.OriginalPageHeight") <> "N"
				currentControl.AddProperty("OriginalPageHeight", currentControl.PageHeight)
				currentControl.AddProperty("OriginalPageWidth", currentControl.PageWidth)
				currentControl.AddProperty("OriginalTabHeight", currentControl.Height - currentControl.PageHeight - (currentControl.BorderWidth * 2))
				currentControl.AddProperty("OriginalTabWidth", currentControl.Width - currentControl.PageWidth - (currentControl.BorderWidth * 2))
			ENDIF 
			LOCAL controlLoop
			FOR controlLoop = 1 TO currentControl.PageCount
				this.ProcessCurrentControl(currentControl.Pages(controlLoop))
			NEXT 
			LOCAL tabWidthAdjustment, tabHeightAdjustment
			tabWidthAdjustment = currentControl.Width - currentControl.PageWidth - ;
				(currentControl.BorderWidth * 2) - currentControl.OriginalTabWidth
		
			tabHeightAdjustment = currentControl.Height - currentControl.PageHeight - ;
				(currentControl.BorderWidth * 2) - currentControl.OriginalTabHeight
		
			currentControl.Height = currentControl.OriginalHeight + ;
				(currentControl.OriginalPageHeight * this.GetRatio()) - ;
				currentControl.OriginalPageHeight + tabHeightAdjustment
		
			currentControl.Width = currentControl.OriginalWidth + ;
				(currentControl.OriginalPageWidth * this.GetRatio()) - ;
				currentControl.OriginalPageWidth + tabWidthAdjustment
			this.SetNewPosition(currentControl)
		ENDIF 
		
	ENDPROC

	PROCEDURE processspinner
		LPARAMETERS currentControl as spinner 
		IF LOWER(currentControl.BaseClass) = "spinner"
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
			this.SetNewFontSize(currentControl)
		ENDIF 
	ENDPROC

	PROCEDURE processtextbox
		LPARAMETERS currentControl as textbox 
		IF LOWER(currentControl.BaseClass) = "textbox"
			this.SetNewSize(currentControl)
			this.SetNewPosition(currentControl)
			this.SetNewFontSize(currentControl)
		ENDIF 
	ENDPROC

	PROCEDURE reapplyanchorproperty
		LPARAMETERS currentControl
		IF TYPE("currentControl.OriginalAnchor") == "N" ;
			AND currentControl.OriginalAnchor > 0
			currentControl.Anchor = currentControl.OriginalAnchor
		ENDIF 
		
	ENDPROC

	PROCEDURE reapplysavedproperties
		LPARAMETERS currentControl
		LOCAL controlLoop, controlLoopObject, pageLoop, pageObject
		this.ReapplyAnchorProperty(currentControl)
		IF LOWER(currentControl.baseclass) == "form"
			FOR controlLoop = 1 TO currentControl.ControlCount
				controlLoopObject = currentControl.Controls(controlLoop)
				this.ReapplySavedProperties(controlLoopObject)
			NEXT 
		ENDIF 
		IF LOWER(currentControl.baseclass) == "pageframe"
			FOR pageLoop = 1 TO currentControl.PageCount
				pageObject = currentControl.Pages(pageLoop)
				FOR controlLoop = 1 TO pageObject.ControlCount
					controlLoopObject = pageObject.Controls(controlLoop)
					this.ReapplySavedProperties(controlLoopObject)
				NEXT 
			NEXT 
		ENDIF 
		IF LOWER(currentControl.baseclass) == "container"
			FOR controlLoop = 1 TO currentControl.ControlCount
				controlLoopObject = currentControl.Controls(controlLoop)
				this.ReapplySavedProperties(controlLoopObject)
			NEXT 
		ENDIF 
		
	ENDPROC

	PROCEDURE resizecontainer
		LPARAMETERS containerToResize as Container
		IF TYPE("_Screen.DpiFactor") <> "N"
			RETURN
		ENDIF
		this.LogControlInformation()
		this.AddProperty("textForm", CREATEOBJECT("form"))
		this.ProcessCurrentControl(containerToResize)
		this.ReapplySavedProperties(containerToResize)
		this.textForm.Release()
		this.textForm = NULL
	ENDPROC

	PROCEDURE setnewcolumnwidths
		LPARAMETERS currentControl
		IF NOT EMPTY(currentControl.ColumnWidths)
			LOCAL widthLoop as Integer , newWidth as String, dpiRatio as Number
			newWidth = ""
			dpiRatio = this.Getratio()
			FOR widthLoop = 1 TO GETWORDCOUNT(currentControl.ColumnWidths, ",")
				newWidth = newWidth + TRANSFORM(VAL(GETWORDNUM(currentControl.ColumnWidths, widthLoop, ","))*dpiRatio) + ","
			NEXT 
			currentControl.ColumnWidths = ALLTRIM(newWidth, 0, ",")
		ENDIF 
		
	ENDPROC

	PROCEDURE setnewfontsize
		LPARAMETERS currentControl
		currentControl.FontSize = CEILING(currentControl.OriginalFontSize * this.getRatio())
		
	ENDPROC

	PROCEDURE setnewposition
		LPARAMETERS currentControl
		LOCAL dpiRatio, originalAnchor
		dpiRatio = this.GetRatio()
		currentControl.Left = currentControl.OriginalLeft * dpiRatio
		currentControl.Top = currentControl.OriginalTop * dpiRatio
		
	ENDPROC

	PROCEDURE setnewsize
		LPARAMETERS currentControl
		LOCAL dpiRatio
		dpiRatio = this.GetRatio()
		currentControl.Height = currentControl.OriginalHeight * dpiRatio
		currentControl.Width = currentControl.OriginalWidth * dpiRatio
		
	ENDPROC

ENDDEFINE

DEFINE CLASS dpisystem AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: declareapis
		*m: getscaleratio
	*</DefinedPropArrayMethod>

	Name = "dpisystem"
	
	PROCEDURE declareapis
		Declare Integer GetDC In Win32API ;
			INTEGER iHDC
		
		Declare Integer GetDeviceCaps In WIN32API ;
			INTEGER iHDC, Integer iIndex
		
	ENDPROC

	PROCEDURE getscaleratio
		#Define cnLOG_PIXELS_X 88
		#Define cnLOG_PIXELS_Y 90
		
		Local liHDC, liPixelsPerInchX, liPixelsPerInchY
		liHDC = GetDC(_Screen.HWnd)
		liPixelsPerInchX = GetDeviceCaps(liHDC, cnLOG_PIXELS_X)
		liPixelsPerInchY = GetDeviceCaps(liHDC, cnLOG_PIXELS_Y)
		
		Return liPixelsPerInchX / 96
		
	ENDPROC

	PROCEDURE Init
		This.DeclareApis()
		_Screen.AddProperty("dpiFactor", This.GetScaleRatio())
		
	ENDPROC

ENDDEFINE

DEFINE CLASS dpiwatch AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: buf2dword
		*m: declareapis
		*m: dpichanged
		*m: dpichangedevent
		*m: processopenforms
		*m: registerwatchfordpichange
		*m: resetmenu
		*m: setdpifactor
	*</DefinedPropArrayMethod>

	Name = "dpiwatch"
	
	PROCEDURE buf2dword
		LPARAMETERS cBuffer
		RETURN Asc(SUBSTR(cBuffer, 1,1)) + ;
			BitLShift(Asc(SUBSTR(cBuffer, 2,1)),  8) +;
			BitLShift(Asc(SUBSTR(cBuffer, 3,1)), 16) +;
			BitLShift(Asc(SUBSTR(cBuffer, 4,1)), 24)
		
	ENDPROC

	PROCEDURE declareapis
		DECLARE integer GetDpiForWindow IN user32 as GetDpiForWindow integer
		DECLARE integer GetWindowLong IN WIN32API ;
			integer hWnd, ;
			integer nIndex
		DECLARE integer CallWindowProc IN WIN32API ;
			integer lpPrevWndFunc, ;
			integer hWnd,integer Msg,;
			integer wParam,;
			integer lParam
		
		LOCAL GWL_WNDPROC
		GWL_WNDPROC = -4
		THIS.addproperty("nOldProc", GetWindowLong(_VFP.HWnd, GWL_WNDPROC))
		DECLARE integer GetWindowDpiHostingBehavior IN user32 as GetWindowDpiHostingBehavior integer hWnd
		
		DECLARE RtlMoveMemory IN kernel32 As MemToStr;
			STRING @dst, INTEGER src, INTEGER nLength
		
	ENDPROC

	PROCEDURE Destroy
		LOCAL WM_DPICHANGED
		WM_DPICHANGED = 0x02E0
		UNBINDEVENTS(_VFP.hWnd, WM_DPICHANGED)
	ENDPROC

	PROCEDURE dpichanged
		this.SetDpiFactor()
		this.ProcessOpenForms()
		this.ResetMenu()
	ENDPROC

	PROCEDURE dpichangedevent
		LPARAMETERS hWnd as Integer, Msg as Integer, wParam as Integer, lParam as Integer
		this.dpichanged()
		
		local nBufSize, cBuffer, nLeft, nTop, nWidth, nHeight
		nBufSize = 16
		cBuffer = REPLICATE(CHR(0), nBufsize)
		MemToStr(@cBuffer, m.lParam, nBufsize)
		
		nLeft = this.buf2dword(SUBSTR(cBuffer, 1, 4))
		nTop = this.buf2dword(SUBSTR(cBuffer,5, 4))
		nWidth = this.buf2dword(SUBSTR(cBuffer, 9, 4)) - m.nLeft
		nHeight = this.buf2dword(SUBSTR(cBuffer, 13, 4)) - m.nTop
		
		_VFP.Left = m.nLeft
		_VFP.Top = m.nTop
		_VFP.Width = m.nWidth
		_VFP.Height = m.nHeight
		
		LOCAL lResult
		lResult=CallWindowProc(this.nOldProc,hWnd,msg,wParam,lParam)
		RETURN lResult
		
	ENDPROC

	PROCEDURE Init
		this.DeclareApis()
		this.SetDpiFactor()
		this.RegisterWatchForDpiChange()
		
	ENDPROC

	PROCEDURE processopenforms
		LOCAL formLoop
		FOR formLoop = 1 TO _Screen.FormCount
			IF TYPE("_Screen.Forms(formLoop).DpiResizer.Name") == "C"
				_Screen.Forms(formLoop).DpiResizer.ResizeContainer(_Screen.Forms(formLoop))
			ENDIF
		NEXT
		
	ENDPROC

	PROCEDURE registerwatchfordpichange
		* https://docs.microsoft.com/en-us/windows/win32/hidpi/wm-dpichanged
		
		LOCAL WM_DPICHANGED
		WM_DPICHANGED = 0x02E0
		BINDEVENT(_VFP.HWnd, WM_DPICHANGED, this, "DpiChangedEvent")
		
		
	ENDPROC

	PROCEDURE resetmenu
	ENDPROC

	PROCEDURE setdpifactor
		LOCAL dpiSetting
		dpiSetting = GetDpiForWindow(_VFP.HWnd)
		_Screen.AddProperty("dpiFactor", dpiSetting / 96)
		
	ENDPROC

ENDDEFINE
